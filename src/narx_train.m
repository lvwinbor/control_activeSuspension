% Solve an Autoregression Problem with External Input with a NARX Neural Network
% Script generated by Neural Time Series app
%
% This script assumes these variables are defined:
%
%   input_data - input time series.
%   target_data - feedback time series.

clc;
clear;
load('../data/narx_data.mat');

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainbr'; % Levenberg-Marquardt backpropagation.

% Create a Nonlinear Autoregressive Network with External Input
inputDelays = 1:2;
feedbackDelays = 1:2;
hiddenLayerSize = 16;
net = narxnet(inputDelays, feedbackDelays, hiddenLayerSize, 'open', trainFcn);

% Choose Input and Feedback Pre/Post-Processing Functions
% Settings for feedback input are automatically applied to feedback output
% For a list of all processing functions type: help nnprocess
% Customize input parameters at: net.inputs{i}.processParam
% Customize output parameters at: net.outputs{i}.processParam
net.inputs{1}.processFcns = {'removeconstantrows', 'mapminmax'};
net.inputs{2}.processFcns = {'removeconstantrows', 'mapminmax'};

% Setup Division of Data for Training, Validation, Testing
% For a list of all data division functions type: help nndivision
net.divideFcn = 'dividerand'; % Divide data randomly
net.divideMode = 'time'; % Divide up every sample
net.divideParam.trainRatio = 70 / 100;
net.divideParam.valRatio = 15 / 100;
net.divideParam.testRatio = 15 / 100;


input1 = input_data;

target = target_data;
X1 = tonndata(input1, false, false);
T = tonndata(target, false, false);


% Prepare the Data for Training and Simulation
% The function PREPARETS prepares timeseries data for a particular network,
% shifting time by the minimum amount to fill input states and layer
% states. Using PREPARETS allows you to keep your original time series data
% unchanged, while easily customizing it for networks with differing
% numbers of delays, with open loop or closed loop feedback modes.
[x, xi, ai, t] = preparets(net, X1, {}, T);


% Train the Network
[net_narx, tr] = train(net, x, t, xi, ai);
